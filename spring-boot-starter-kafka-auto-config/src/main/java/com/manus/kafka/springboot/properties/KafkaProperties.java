package com.manus.kafka.springboot.properties;

import org.springframework.boot.context.properties.ConfigurationProperties;

import java.util.HashMap;
import java.util.Map;

/**
 * Configuration properties for Kafka.
 * This class maps Spring Boot configuration properties to Kafka properties.
 */
@ConfigurationProperties(prefix = "spring.kafka")
public class KafkaProperties {
    
    /**
     * Comma-delimited list of host:port pairs to use for establishing the initial connections
     * to the Kafka cluster. Applies to all components unless overridden.
     */
    private String bootstrapServers;
    
    /**
     * ID to pass to the server when making requests. Used for server-side logging.
     */
    private String clientId;
    
    /**
     * Additional properties, common to producers and consumers, used to configure the client.
     */
    private Map<String, String> properties = new HashMap<>();
    
    /**
     * Producer-specific configuration.
     */
    private Producer producer = new Producer();
    
    /**
     * Consumer-specific configuration.
     */
    private Consumer consumer = new Consumer();
    
    /**
     * Admin-specific configuration.
     */
    private Admin admin = new Admin();
    
    /**
     * Security configuration.
     */
    private Security security = new Security();
    
    public String getBootstrapServers() {
        return bootstrapServers;
    }
    
    public void setBootstrapServers(String bootstrapServers) {
        this.bootstrapServers = bootstrapServers;
    }
    
    public String getClientId() {
        return clientId;
    }
    
    public void setClientId(String clientId) {
        this.clientId = clientId;
    }
    
    public Map<String, String> getProperties() {
        return properties;
    }
    
    public void setProperties(Map<String, String> properties) {
        this.properties = properties;
    }
    
    public Producer getProducer() {
        return producer;
    }
    
    public void setProducer(Producer producer) {
        this.producer = producer;
    }
    
    public Consumer getConsumer() {
        return consumer;
    }
    
    public void setConsumer(Consumer consumer) {
        this.consumer = consumer;
    }
    
    public Admin getAdmin() {
        return admin;
    }
    
    public void setAdmin(Admin admin) {
        this.admin = admin;
    }
    
    public Security getSecurity() {
        return security;
    }
    
    public void setSecurity(Security security) {
        this.security = security;
    }
    
    /**
     * Producer properties.
     */
    public static class Producer {
        
        /**
         * Number of acknowledgments the producer requires the leader to have received
         * before considering a request complete.
         */
        private String acks = "all";
        
        /**
         * Number of retries to attempt when a batch fails.
         */
        private Integer retries = 3;
        
        /**
         * Default batch size. A small batch size will make batching less common and may
         * reduce throughput.
         */
        private Integer batchSize = 16384;
        
        /**
         * Delay to add before sending records. A longer delay gives more time to batch records.
         */
        private Long lingerMs = 5L;
        
        /**
         * Total memory size the producer can use to buffer records waiting to be sent to the server.
         */
        private Long bufferMemory = 33554432L;
        
        /**
         * Serializer class for keys.
         */
        private String keySerializer;
        
        /**
         * Serializer class for values.
         */
        private String valueSerializer;
        
        /**
         * Compression type for all data generated by the producer.
         */
        private String compressionType;
        
        /**
         * Additional producer-specific properties used to configure the client.
         */
        private Map<String, String> properties = new HashMap<>();
        
        public String getAcks() {
            return acks;
        }
        
        public void setAcks(String acks) {
            this.acks = acks;
        }
        
        public Integer getRetries() {
            return retries;
        }
        
        public void setRetries(Integer retries) {
            this.retries = retries;
        }
        
        public Integer getBatchSize() {
            return batchSize;
        }
        
        public void setBatchSize(Integer batchSize) {
            this.batchSize = batchSize;
        }
        
        public Long getLingerMs() {
            return lingerMs;
        }
        
        public void setLingerMs(Long lingerMs) {
            this.lingerMs = lingerMs;
        }
        
        public Long getBufferMemory() {
            return bufferMemory;
        }
        
        public void setBufferMemory(Long bufferMemory) {
            this.bufferMemory = bufferMemory;
        }
        
        public String getKeySerializer() {
            return keySerializer;
        }
        
        public void setKeySerializer(String keySerializer) {
            this.keySerializer = keySerializer;
        }
        
        public String getValueSerializer() {
            return valueSerializer;
        }
        
        public void setValueSerializer(String valueSerializer) {
            this.valueSerializer = valueSerializer;
        }
        
        public String getCompressionType() {
            return compressionType;
        }
        
        public void setCompressionType(String compressionType) {
            this.compressionType = compressionType;
        }
        
        public Map<String, String> getProperties() {
            return properties;
        }
        
        public void setProperties(Map<String, String> properties) {
            this.properties = properties;
        }
    }
    
    /**
     * Consumer properties.
     */
    public static class Consumer {
        
        /**
         * Unique string that identifies the consumer group to which this consumer belongs.
         */
        private String groupId;
        
        /**
         * Whether the consumer's offset is periodically committed in the background.
         */
        private Boolean enableAutoCommit = false;
        
        /**
         * Frequency with which the consumer offsets are auto-committed to Kafka if
         * 'enable.auto.commit' is set to true.
         */
        private Integer autoCommitIntervalMs;
        
        /**
         * What to do when there is no initial offset in Kafka or if the current offset
         * no longer exists on the server.
         */
        private String autoOffsetReset = "earliest";
        
        /**
         * Deserializer class for keys.
         */
        private String keyDeserializer;
        
        /**
         * Deserializer class for values.
         */
        private String valueDeserializer;
        
        /**
         * Maximum number of records returned in a single call to poll().
         */
        private Integer maxPollRecords = 500;
        
        /**
         * Additional consumer-specific properties used to configure the client.
         */
        private Map<String, String> properties = new HashMap<>();
        
        public String getGroupId() {
            return groupId;
        }
        
        public void setGroupId(String groupId) {
            this.groupId = groupId;
        }
        
        public Boolean getEnableAutoCommit() {
            return enableAutoCommit;
        }
        
        public void setEnableAutoCommit(Boolean enableAutoCommit) {
            this.enableAutoCommit = enableAutoCommit;
        }
        
        public Integer getAutoCommitIntervalMs() {
            return autoCommitIntervalMs;
        }
        
        public void setAutoCommitIntervalMs(Integer autoCommitIntervalMs) {
            this.autoCommitIntervalMs = autoCommitIntervalMs;
        }
        
        public String getAutoOffsetReset() {
            return autoOffsetReset;
        }
        
        public void setAutoOffsetReset(String autoOffsetReset) {
            this.autoOffsetReset = autoOffsetReset;
        }
        
        public String getKeyDeserializer() {
            return keyDeserializer;
        }
        
        public void setKeyDeserializer(String keyDeserializer) {
            this.keyDeserializer = keyDeserializer;
        }
        
        public String getValueDeserializer() {
            return valueDeserializer;
        }
        
        public void setValueDeserializer(String valueDeserializer) {
            this.valueDeserializer = valueDeserializer;
        }
        
        public Integer getMaxPollRecords() {
            return maxPollRecords;
        }
        
        public void setMaxPollRecords(Integer maxPollRecords) {
            this.maxPollRecords = maxPollRecords;
        }
        
        public Map<String, String> getProperties() {
            return properties;
        }
        
        public void setProperties(Map<String, String> properties) {
            this.properties = properties;
        }
    }
    
    /**
     * Admin properties.
     */
    public static class Admin {
        
        /**
         * Additional admin-specific properties used to configure the client.
         */
        private Map<String, String> properties = new HashMap<>();
        
        /**
         * Whether to automatically create topics during initialization.
         */
        private boolean autoCreate = false;
        
        public Map<String, String> getProperties() {
            return properties;
        }
        
        public void setProperties(Map<String, String> properties) {
            this.properties = properties;
        }
        
        public boolean isAutoCreate() {
            return autoCreate;
        }
        
        public void setAutoCreate(boolean autoCreate) {
            this.autoCreate = autoCreate;
        }
    }
    
    /**
     * Security properties.
     */
    public static class Security {
        
        /**
         * Security protocol used to communicate with brokers.
         */
        private String protocol;
        
        /**
         * SASL mechanism used for client connections.
         */
        private String saslMechanism;
        
        /**
         * JAAS login context parameters for SASL connections in the format used by JAAS
         * configuration files.
         */
        private String saslJaasConfig;
        
        public String getProtocol() {
            return protocol;
        }
        
        public void setProtocol(String protocol) {
            this.protocol = protocol;
        }
        
        public String getSaslMechanism() {
            return saslMechanism;
        }
        
        public void setSaslMechanism(String saslMechanism) {
            this.saslMechanism = saslMechanism;
        }
        
        public String getSaslJaasConfig() {
            return saslJaasConfig;
        }
        
        public void setSaslJaasConfig(String saslJaasConfig) {
            this.saslJaasConfig = saslJaasConfig;
        }
    }
}